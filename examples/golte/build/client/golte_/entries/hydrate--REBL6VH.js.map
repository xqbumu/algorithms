{"version":3,"mappings":"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","names":["ctx","create_if_block","ClientNode","get"],"sources":["file:///opt/src/github.com/xqbumu/algorithms/examples/golte/node_modules/.pnpm/svelte@4.2.9/node_modules/svelte/src/runtime/internal/spread.js","file:///opt/src/github.com/xqbumu/algorithms/examples/golte/node_modules/.pnpm/golte@0.0.3_svelte@4.2.9/node_modules/golte/js/shared/Node.svelte","file:///opt/src/github.com/xqbumu/algorithms/examples/golte/node_modules/.pnpm/golte@0.0.3_svelte@4.2.9/node_modules/golte/js/shared/node-wrapper.js","file:///opt/src/github.com/xqbumu/algorithms/examples/golte/node_modules/.pnpm/golte@0.0.3_svelte@4.2.9/node_modules/golte/js/shared/Root.svelte","file:///opt/src/github.com/xqbumu/algorithms/examples/golte/node_modules/.pnpm/golte@0.0.3_svelte@4.2.9/node_modules/golte/js/client/hydrate.js"],"sourcesContent":["/** @returns {{}} */\nexport function get_spread_update(levels, updates) {\n\tconst update = {};\n\tconst to_null_out = {};\n\tconst accounted_for = { $$scope: 1 };\n\tlet i = levels.length;\n\twhile (i--) {\n\t\tconst o = levels[i];\n\t\tconst n = updates[i];\n\t\tif (n) {\n\t\t\tfor (const key in o) {\n\t\t\t\tif (!(key in n)) to_null_out[key] = 1;\n\t\t\t}\n\t\t\tfor (const key in n) {\n\t\t\t\tif (!accounted_for[key]) {\n\t\t\t\t\tupdate[key] = n[key];\n\t\t\t\t\taccounted_for[key] = 1;\n\t\t\t\t}\n\t\t\t}\n\t\t\tlevels[i] = n;\n\t\t} else {\n\t\t\tfor (const key in o) {\n\t\t\t\taccounted_for[key] = 1;\n\t\t\t}\n\t\t}\n\t}\n\tfor (const key in to_null_out) {\n\t\tif (!(key in update)) update[key] = undefined;\n\t}\n\treturn update;\n}\n\nexport function get_spread_object(spread_props) {\n\treturn typeof spread_props === 'object' && spread_props !== null ? spread_props : {};\n}\n","<!-- Do not import this directly; instead import node-wrapper.js -->\n\n<script>\n\timport { Node } from \"./node-wrapper.js\";\n\n\t/** @type {import(\"./list.js\").ListNode<import(\"./types.js\").CompState>} */\n\texport let node;\n\t\n\t/** @type {number} */\n\texport let index;\n\n\tconst { next, content } = node;\n</script>\n\n<svelte:component this={content.comp} {...content.props}>\n\t<!-- #key is needed because csr error handling relies on constructor being called again -->\n\t{#key $next}\n\t\t{#if $next}\n\t\t\t<!-- Cannot use svelte:self because need to use wrapper -->\n\t\t\t<Node node={$next} index={index + 1} />\n\t\t{/if}\n\t{/key}\n</svelte:component>\n","// This file is a wrapper for Node.svelte that adds functionality handling errors.\n// When an error is thrown during ssr, it catches it and instead\n// the specified error page is rendered instead.\nimport { default as ClientNode } from \"./Node.svelte\";\nimport { getContext } from \"svelte\";\nimport { handleError } from \"./keys.js\";\nconst ServerNode = ClientNode;\nconst ssrWrapper = {\n    ...ServerNode,\n    $$render: (result, props, bindings, slots, context) => {\n        try {\n            return ServerNode.$$render(result, props, bindings, slots, context);\n        }\n        catch (err) {\n            let message = \"Internal Error\";\n            if (import.meta.env.MODE === \"development\") {\n                message = (err instanceof Error && err.stack) ? err.stack : String(err);\n            }\n            const errProps = {\n                status: 500,\n                message,\n            };\n            getContext(handleError)({ index: props.index, props: errProps });\n            return props.node.content.errPage.$$render(result, errProps, bindings, slots, context);\n        }\n    }\n};\nfunction csrWrapper(options) {\n    // if there as an error during ssr, don't render anything new\n    const ssrError = options.props.node.content.ssrError;\n    if (ssrError)\n        return new options.props.node.content.errPage({ ...options, props: ssrError });\n    return new ClientNode(options);\n}\n;\nexport const Node = import.meta.env.SSR ? ssrWrapper : csrWrapper;\n//# sourceMappingURL=node-wrapper.js.map","<script>\n    import { Node } from \"./node-wrapper.js\";\n    import { onMount, setContext } from \"svelte\";\n    import { golteContext} from \"./keys.js\";\n    import { get } from \"svelte/store\";\n    import { AppState } from \"./appstate.js\";\n\n    /** @type {import(\"./types.js\").CompState[]} */\n    export let nodes;\n\n    /** @type {import(\"./types.js\").ContextData} */\n    export let contextData;\n\n    const state = new AppState(contextData.URL, nodes);\n    const { node } = state;\n    setContext(golteContext, state);\n\n    onMount(() => {\n        history.replaceState(get(state.url).href, \"\");\n        addEventListener(\"popstate\", async (e) => {\n            if (!e.state) return;\n            await state.update(e.state);\n        });\n    });\n</script>\n\n<!-- #key is needed because csr error handling relies on constructor being called again -->\n{#key $node}\n    {#if $node}\n        <Node node={$node} index={0} />\n    {/if}\n{/key}\n","import Root from \"../shared/Root.svelte\";\nexport async function hydrate(target, nodes, contextData) {\n    const promise = Promise.all(nodes.map(async (n) => ({\n        comp: (await import(n.comp)).default,\n        props: n.props,\n        errPage: (await import(n.errPage)).default,\n        ssrError: n.ssrError,\n    })));\n    new Root({\n        target: target,\n        props: {\n            nodes: await promise,\n            contextData,\n        },\n        hydrate: true,\n    });\n}\n//# sourceMappingURL=hydrate.js.map"],"file":"golte_/entries/hydrate--REBL6VH.js"}